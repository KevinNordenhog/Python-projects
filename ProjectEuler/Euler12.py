#The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
#
#1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
#Let us list the factors of the first seven triangle numbers:
#
# 1: 1
# 3: 1,3
# 6: 1,2,3,6
#10: 1,2,5,10
#15: 1,3,5,15
#21: 1,3,7,21
#28: 1,2,4,7,14,28
#We can see that 28 is the first triangle number to have over five divisors.
#
#What is the value of the first triangle number to have over five hundred divisors?
import math

def main():
    num = 1
    for a in range(2,50000):
        num = num + a
        divisors = Divisors(num)
        if divisors > 500:
            print num
            break

#Not fast enough
def NoOfDivisors(number):
    divisors = 0
    for i in range(number-1, 0, -1):
        if number % i == 0:
            divisors += 1
    return divisors

#More optimized
def Divisors(n):
    number_of_factors = 0
    for i in xrange(1, int(math.ceil(math.sqrt(n))) + 1):
        if n % i == 0:
            number_of_factors += 2
        if i * i == n:
            number_of_factors -= 1
    return number_of_factors

if __name__ == '__main__': main()
